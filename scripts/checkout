#!/bin/bash

#
# Checks out a commit
#
#   checkout <-c commit> <repo>
#

function usage() {
  echo "Usage: titan run [-p name=value] <-n name> <source>" 1>&2
  exit 2
}

function die() {
  echo $1
  exit 1
}

commit=
while getopts ":c:" o; do
  case "${o}" in
    c)
      commit=$OPTARG
      ;;
    *)
      usage
      ;;
  esac
done
shift $((OPTIND-1))
repo_name=$1

[[ -z "$commit" ]] && usage
[[ -z "$repo_name" ]] && usage

snapshots=$(kubectl get volumesnapshot --selector=release=$repo_name --selector=commit=$commit --template "{{range .items}}{{.metadata.name}} {{end}}")
[[ -z "$snapshots" ]] && die "unable to find commit $commit in $repo_name"

uuid=$(uuidgen | tr '[:upper:]' '[:lower:]')
update_args=
for snapshot in $snapshots; do
  json=$(kubectl get volumesnapshot $snapshot -o json)
  pvc=$(echo $json | jq -r .metadata.labels.pvc)
  size=$(echo $json | jq -r .metadata.labels.size)
  volume=$(echo $json | jq -r .metadata.labels.volume)
  name=$pvc-$uuid

  echo "Creating pvc for $name"
  kubectl create -f - <<EOF
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: $name
  labels:
    release: $repo_name
    pvc: $pvc
spec:
  dataSource:
    name: $snapshot
    kind: VolumeSnapshot
    apiGroup: snapshot.storage.k8s.io
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: $size
EOF
  [[ $? == 0 ]] || exit 1
  status=Pending
  while [[ $status != "Bound" ]]; do
    status=$(kubectl get pvc $name --template "{{.status.phase}}")
  done

  update_args="$update_args $volume=$name"
done

echo "Updating deployment"
deployment=$(kubectl get deployment -o json --selector=release=$repo_name | jq .items[0])
deployment_name=$(echo $deployment | jq -r .metadata.name)
updated_deployment=$(echo $deployment | $(dirname $0)/update-deployment $update_args)
echo $updated_deployment | kubectl apply -f - || exit 1

until kubectl rollout status deployment/$deployment_name; do
  sleep 1
done

echo "Removing old volumes"
for pvc in $(echo $deployment | jq -r .spec.template.spec.volumes[].persistentVolumeClaim.claimName); do
    kubectl delete pvc $pvc
done

# This should probably be replaced with a structured wait for the deployment
sleep 5

echo "Restarting port forwarding"
services=$(kubectl get --selector=release=$repo_name service --no-headers -o custom-columns=":metadata.name")
for service in $services; do
    ps -ef | grep "kubectl port-forward" | grep "svc/$service"  | awk '{print $2}' | xargs kill
    if [[ $service != *"headless" ]]; then
        ports=$(kubectl get service $service --template '{{range .spec.ports}}{{.port}}{{"\n"}}{{end}}')
        for port in $ports; do
            kubectl port-forward --namespace default svc/$service $port:$port >/dev/null 2>&1 &
        done
    fi
done
